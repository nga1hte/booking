// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    "bookingId"
) VALUES (
    $1
)RETURNING "paymentId", "bookingId", "paymentDate"
`

func (q *Queries) CreatePayment(ctx context.Context, bookingid int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, bookingid)
	var i Payment
	err := row.Scan(&i.PaymentId, &i.BookingId, &i.PaymentDate)
	return i, err
}

const getBookingPayment = `-- name: GetBookingPayment :one
SELECT "paymentId", "bookingId", "paymentDate" FROM payments
WHERE "bookingId" = $1
`

func (q *Queries) GetBookingPayment(ctx context.Context, bookingid int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getBookingPayment, bookingid)
	var i Payment
	err := row.Scan(&i.PaymentId, &i.BookingId, &i.PaymentDate)
	return i, err
}

const getPayments = `-- name: GetPayments :many
SELECT "paymentId", "bookingId", "paymentDate" FROM payments
ORDER BY "paymentDate"
LIMIT $1
OFFSET $2
`

type GetPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPayments(ctx context.Context, arg GetPaymentsParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.PaymentId, &i.BookingId, &i.PaymentDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
