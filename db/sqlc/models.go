// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Usert string

const (
	UsertAdmin  Usert = "admin"
	UsertNormal Usert = "normal"
)

func (e *Usert) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Usert(s)
	case string:
		*e = Usert(s)
	default:
		return fmt.Errorf("unsupported scan type for Usert: %T", src)
	}
	return nil
}

type NullUsert struct {
	Usert Usert
	Valid bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsert) Scan(value interface{}) error {
	if value == nil {
		ns.Usert, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Usert.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsert) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Usert, nil
}

type Booking struct {
	BookingId  int64     `json:"bookingId"`
	BookedBy   int64     `json:"bookedBy"`
	BookOn     time.Time `json:"bookOn"`
	BookStarts time.Time `json:"bookStarts"`
	BookEnds   time.Time `json:"bookEnds"`
}

type Payment struct {
	PaymentId   int64     `json:"paymentId"`
	BookingId   int64     `json:"bookingId"`
	PaymentDate time.Time `json:"paymentDate"`
}

type User struct {
	ID           int64     `json:"id"`
	FullName     string    `json:"full_name"`
	Email        string    `json:"email"`
	MobileNumber string    `json:"mobile_number"`
	Password     string    `json:"password"`
	CreatedAt    time.Time `json:"created_at"`
	UserType     Usert     `json:"user_type"`
}
